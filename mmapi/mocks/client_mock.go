// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddReaction provides a mock function for the type MockClient
func (_mock *MockClient) AddReaction(reaction *model.Reaction) error {
	ret := _mock.Called(reaction)

	if len(ret) == 0 {
		panic("no return value specified for AddReaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Reaction) error); ok {
		r0 = returnFunc(reaction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_AddReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReaction'
type MockClient_AddReaction_Call struct {
	*mock.Call
}

// AddReaction is a helper method to define mock.On call
//   - reaction
func (_e *MockClient_Expecter) AddReaction(reaction interface{}) *MockClient_AddReaction_Call {
	return &MockClient_AddReaction_Call{Call: _e.mock.On("AddReaction", reaction)}
}

func (_c *MockClient_AddReaction_Call) Run(run func(reaction *model.Reaction)) *MockClient_AddReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Reaction))
	})
	return _c
}

func (_c *MockClient_AddReaction_Call) Return(err error) *MockClient_AddReaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_AddReaction_Call) RunAndReturn(run func(reaction *model.Reaction) error) *MockClient_AddReaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstPostBeforeTimeRangeID provides a mock function for the type MockClient
func (_mock *MockClient) GetFirstPostBeforeTimeRangeID(channelID string, startTime int64, endTime int64) (string, error) {
	ret := _mock.Called(channelID, startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstPostBeforeTimeRangeID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int64, int64) (string, error)); ok {
		return returnFunc(channelID, startTime, endTime)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int64, int64) string); ok {
		r0 = returnFunc(channelID, startTime, endTime)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = returnFunc(channelID, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetFirstPostBeforeTimeRangeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstPostBeforeTimeRangeID'
type MockClient_GetFirstPostBeforeTimeRangeID_Call struct {
	*mock.Call
}

// GetFirstPostBeforeTimeRangeID is a helper method to define mock.On call
//   - channelID
//   - startTime
//   - endTime
func (_e *MockClient_Expecter) GetFirstPostBeforeTimeRangeID(channelID interface{}, startTime interface{}, endTime interface{}) *MockClient_GetFirstPostBeforeTimeRangeID_Call {
	return &MockClient_GetFirstPostBeforeTimeRangeID_Call{Call: _e.mock.On("GetFirstPostBeforeTimeRangeID", channelID, startTime, endTime)}
}

func (_c *MockClient_GetFirstPostBeforeTimeRangeID_Call) Run(run func(channelID string, startTime int64, endTime int64)) *MockClient_GetFirstPostBeforeTimeRangeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockClient_GetFirstPostBeforeTimeRangeID_Call) Return(s string, err error) *MockClient_GetFirstPostBeforeTimeRangeID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockClient_GetFirstPostBeforeTimeRangeID_Call) RunAndReturn(run func(channelID string, startTime int64, endTime int64) (string, error)) *MockClient_GetFirstPostBeforeTimeRangeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function for the type MockClient
func (_mock *MockClient) GetPost(postID string) (*model.Post, error) {
	ret := _mock.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *model.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Post, error)); ok {
		return returnFunc(postID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Post); ok {
		r0 = returnFunc(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type MockClient_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - postID
func (_e *MockClient_Expecter) GetPost(postID interface{}) *MockClient_GetPost_Call {
	return &MockClient_GetPost_Call{Call: _e.mock.On("GetPost", postID)}
}

func (_c *MockClient_GetPost_Call) Run(run func(postID string)) *MockClient_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetPost_Call) Return(post *model.Post, err error) *MockClient_GetPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockClient_GetPost_Call) RunAndReturn(run func(postID string) (*model.Post, error)) *MockClient_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostThread provides a mock function for the type MockClient
func (_mock *MockClient) GetPostThread(postID string) (*model.PostList, error) {
	ret := _mock.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostThread")
	}

	var r0 *model.PostList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.PostList, error)); ok {
		return returnFunc(postID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.PostList); ok {
		r0 = returnFunc(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPostThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostThread'
type MockClient_GetPostThread_Call struct {
	*mock.Call
}

// GetPostThread is a helper method to define mock.On call
//   - postID
func (_e *MockClient_Expecter) GetPostThread(postID interface{}) *MockClient_GetPostThread_Call {
	return &MockClient_GetPostThread_Call{Call: _e.mock.On("GetPostThread", postID)}
}

func (_c *MockClient_GetPostThread_Call) Run(run func(postID string)) *MockClient_GetPostThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetPostThread_Call) Return(postList *model.PostList, err error) *MockClient_GetPostThread_Call {
	_c.Call.Return(postList, err)
	return _c
}

func (_c *MockClient_GetPostThread_Call) RunAndReturn(run func(postID string) (*model.PostList, error)) *MockClient_GetPostThread_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsBefore provides a mock function for the type MockClient
func (_mock *MockClient) GetPostsBefore(channelID string, postID string, page int, perPage int) (*model.PostList, error) {
	ret := _mock.Called(channelID, postID, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsBefore")
	}

	var r0 *model.PostList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, int, int) (*model.PostList, error)); ok {
		return returnFunc(channelID, postID, page, perPage)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, int, int) *model.PostList); ok {
		r0 = returnFunc(channelID, postID, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = returnFunc(channelID, postID, page, perPage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPostsBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsBefore'
type MockClient_GetPostsBefore_Call struct {
	*mock.Call
}

// GetPostsBefore is a helper method to define mock.On call
//   - channelID
//   - postID
//   - page
//   - perPage
func (_e *MockClient_Expecter) GetPostsBefore(channelID interface{}, postID interface{}, page interface{}, perPage interface{}) *MockClient_GetPostsBefore_Call {
	return &MockClient_GetPostsBefore_Call{Call: _e.mock.On("GetPostsBefore", channelID, postID, page, perPage)}
}

func (_c *MockClient_GetPostsBefore_Call) Run(run func(channelID string, postID string, page int, perPage int)) *MockClient_GetPostsBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockClient_GetPostsBefore_Call) Return(postList *model.PostList, err error) *MockClient_GetPostsBefore_Call {
	_c.Call.Return(postList, err)
	return _c
}

func (_c *MockClient_GetPostsBefore_Call) RunAndReturn(run func(channelID string, postID string, page int, perPage int) (*model.PostList, error)) *MockClient_GetPostsBefore_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsSince provides a mock function for the type MockClient
func (_mock *MockClient) GetPostsSince(channelID string, since int64) (*model.PostList, error) {
	ret := _mock.Called(channelID, since)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsSince")
	}

	var r0 *model.PostList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int64) (*model.PostList, error)); ok {
		return returnFunc(channelID, since)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int64) *model.PostList); ok {
		r0 = returnFunc(channelID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = returnFunc(channelID, since)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPostsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsSince'
type MockClient_GetPostsSince_Call struct {
	*mock.Call
}

// GetPostsSince is a helper method to define mock.On call
//   - channelID
//   - since
func (_e *MockClient_Expecter) GetPostsSince(channelID interface{}, since interface{}) *MockClient_GetPostsSince_Call {
	return &MockClient_GetPostsSince_Call{Call: _e.mock.On("GetPostsSince", channelID, since)}
}

func (_c *MockClient_GetPostsSince_Call) Run(run func(channelID string, since int64)) *MockClient_GetPostsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockClient_GetPostsSince_Call) Return(postList *model.PostList, err error) *MockClient_GetPostsSince_Call {
	_c.Call.Return(postList, err)
	return _c
}

func (_c *MockClient_GetPostsSince_Call) RunAndReturn(run func(channelID string, since int64) (*model.PostList, error)) *MockClient_GetPostsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockClient
func (_mock *MockClient) GetUser(userID string) (*model.User, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID
func (_e *MockClient_Expecter) GetUser(userID interface{}) *MockClient_GetUser_Call {
	return &MockClient_GetUser_Call{Call: _e.mock.On("GetUser", userID)}
}

func (_c *MockClient_GetUser_Call) Run(run func(userID string)) *MockClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUser_Call) Return(user *model.User, err error) *MockClient_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetUser_Call) RunAndReturn(run func(userID string) (*model.User, error)) *MockClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
